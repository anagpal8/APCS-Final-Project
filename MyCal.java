import java.awt.*;
import javax.swing.*;
import sun.audio.*;
import java.io.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author anagpal8
 */
public class MyCal extends javax.swing.JFrame {

    double firstnum;
    double secondnum;
    double result;
    String operation;
    StringCalc c1 = new StringCalc();
    BaseConversions b1 = new BaseConversions();
    StringCalc2 c2 = new StringCalc2();

    /**
     * Creates new form MyCal
     */
    public MyCal() {
        initComponents();
    }

    /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        eight = new javax.swing.JButton();
        currentInput = new javax.swing.JTextField();
        seven = new javax.swing.JButton();
        one = new javax.swing.JButton();
        five = new javax.swing.JButton();
        six = new javax.swing.JButton();
        four = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        two = new javax.swing.JButton();
        three = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        decimal = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        square = new javax.swing.JButton();
        timesNegOne = new javax.swing.JButton();
        equals = new javax.swing.JButton();
        absoluteValue = new javax.swing.JButton();
        times = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        answerOutput = new javax.swing.JTextField();
        hexConversion = new javax.swing.JButton();
        binaryConvert = new javax.swing.JButton();
        squareRoot = new javax.swing.JButton();
        color = new javax.swing.JButton();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        eight.setText("8");

        eight.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    eightActionPerformed(evt);
                }
            });

        currentInput.setEditable(false);
        currentInput.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    currentInputActionPerformed(evt);
                }
            });

        seven.setText("7");

        seven.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sevenActionPerformed(evt);
                }
            });

        one.setText("1");

        one.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    oneActionPerformed(evt);
                }
            });

        five.setText("5");
        five.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    fiveActionPerformed(evt);
                }
            });

        six.setText("6");
        six.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sixActionPerformed(evt);
                }
            });

        four.setText("4");
        four.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    fourActionPerformed(evt);
                }
            });

        nine.setText("9");
        nine.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    nineActionPerformed(evt);
                }
            });

        two.setText("2");
        two.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    twoActionPerformed(evt);
                }
            });

        three.setText("3");
        three.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    threeActionPerformed(evt);
                }
            });

        zero.setText("0");
        zero.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    zeroActionPerformed(evt);
                }
            });

        decimal.setText(".");
        decimal.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    decimalActionPerformed(evt);
                }
            });

        clear.setText("AC");
        clear.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    clearActionPerformed(evt);
                }
            });

        square.setText("a ²");
        square.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    squareActionPerformed(evt);
                }
            });

        timesNegOne.setText("+-");
        timesNegOne.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    timesNegOneActionPerformed(evt);
                }
            });

        equals.setText("Enter (=)");
        equals.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    equalsActionPerformed(evt);
                }
            });

        absoluteValue.setText("abs");
        absoluteValue.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    absoluteValueActionPerformed(evt);
                }
            });

        times.setText("*");
        times.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    timesActionPerformed(evt);
                }
            });

        plus.setText("+");
        plus.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    plusActionPerformed(evt);
                }
            });

        divide.setText("/");
        divide.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    divideActionPerformed(evt);
                }
            });

        minus.setText("-");
        minus.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    minusActionPerformed(evt);
                }
            });

        answerOutput.setEditable(false);

        hexConversion.setText("hexadecimal");
        hexConversion.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    hexConversionActionPerformed(evt);
                }
            });

        binaryConvert.setText("binary");
        binaryConvert.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    binaryConvertActionPerformed(evt);
                }
            });

        squareRoot.setText("√(  a  )");
        squareRoot.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    squareRootActionPerformed(evt);
                }
            });

        color.setText("Color");
        color.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    colorActionPerformed(evt);
                }
            });

        back.setText("Backspace");
        back.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    backActionPerformed(evt);
                }
            });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentInput)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(zero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(decimal, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(square, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timesNegOne, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(equals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(answerOutput)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(absoluteValue, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))

                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(times, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(squareRoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(hexConversion, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                    .addComponent(binaryConvert, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(color, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(currentInput, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(square, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timesNegOne, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absoluteValue, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))

                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(color, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(times, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(decimal, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(equals, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(answerOutput)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(squareRoot, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(binaryConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(hexConversion, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        
    /**
     * @param the action event
     * @return void
     * The method adds eight to the currentInput 
     */                             
    private void eightActionPerformed(java.awt.event.ActionEvent evt) {                                      
        String takeIn;
        takeIn = currentInput.getText() + eight.getText();
        currentInput.setText(takeIn);
    }                                     

    /**
     * @param the action event
     * @return void 
     */
    private void currentInputActionPerformed(java.awt.event.ActionEvent evt) {                                             

    }  

    /**
     * @param the action event
     * @return void
     * The method adds seven to the currentInput 
     */
    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {                                      
        String takeIn;
        takeIn = currentInput.getText() + seven.getText();
        currentInput.setText(takeIn);
    }                                     

    /**
     * @param the action event
     * @return void
     * The method adds one to the currentInput 
     */
    private void oneActionPerformed(java.awt.event.ActionEvent evt) {                                    
        String takeIn;
        takeIn = currentInput.getText() + one.getText();
        currentInput.setText(takeIn);

    }                                   

    /**
     * @param the action event
     * @return void
     * The method adds five to the currentInput 
     */
    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {                                     
        String takeIn;
        takeIn = currentInput.getText() + five.getText();
        currentInput.setText(takeIn);
    }                                    

    /**
     * @param the action event
     * @return void
     * The method adds six to the currentInput 
     */
    private void sixActionPerformed(java.awt.event.ActionEvent evt) {                                    
        String takeIn;
        takeIn = currentInput.getText() + six.getText();
        currentInput.setText(takeIn);
    }                                                                   

    /**
     * @param the action event
     * @return void
     * The method adds four to the currentInput 
     */
    private void fourActionPerformed(java.awt.event.ActionEvent evt) {                                     
        String takeIn;
        takeIn = currentInput.getText() + four.getText();
        currentInput.setText(takeIn);
    }                                                                    

    /**
     * @param the action event
     * @return void
     * The method adds nine to the currentInput 
     */
    private void nineActionPerformed(java.awt.event.ActionEvent evt) {                                     
        String takeIn;
        takeIn = currentInput.getText() + nine.getText();
        currentInput.setText(takeIn);
    }                                    

    /**
     * @param the action event
     * @return void
     * The method adds two to the currentInput 
     */
    private void twoActionPerformed(java.awt.event.ActionEvent evt) {                                    
        String takeIn;
        takeIn = currentInput.getText() + two.getText();
        currentInput.setText(takeIn);
    }                                   

    /**
     * @param the action event
     * @return void
     * The method adds three to the currentInput 
     */
    private void threeActionPerformed(java.awt.event.ActionEvent evt) {                                      
        String takeIn;
        takeIn = currentInput.getText() + three.getText();
        currentInput.setText(takeIn);
    }                                                                      

    /**
     * @param the action event
     * @return void
     * The method adds zero to the currentInput 
     */
    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {                                     
        String takeIn;
        takeIn = currentInput.getText() + zero.getText();
        currentInput.setText(takeIn);
    }                                                                        

    /**
     * @param the action event
     * @return void
     * The method adds decimal to the currentInput 
     */
    private void decimalActionPerformed(java.awt.event.ActionEvent evt) {                                            
        String takeIn;
        takeIn = currentInput.getText() + ".";
        currentInput.setText(takeIn);

    }                                                                     

    /**
     * @param the action event
     * @return void
     * clears the input and the output 
     */
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {                                      
        currentInput.setText("");
        answerOutput.setText("");
    }                                     

    /**
     * @param the action event
     * @return void
     * method squares the answerOutput 
     */
    private void squareActionPerformed(java.awt.event.ActionEvent evt) {                                       
        Double takeIn;
        takeIn = Double.parseDouble(answerOutput.getText()) * Double.parseDouble(answerOutput.getText());
        answerOutput.setText(takeIn + "");
    }                                                                            

    /**
     * @param the action event
     * @return void
     * method multiplies answerOutput by neg 1
     */
    private void timesNegOneActionPerformed(java.awt.event.ActionEvent evt) {                                            
        Double takeIn;
        takeIn = Double.parseDouble(answerOutput.getText()) * (-1);
        answerOutput.setText(takeIn + "");
    }                                                                                 

    /**
     * @param the action event
     * @return void
     * method adds a plus sign to the input
     */
    private void plusActionPerformed(java.awt.event.ActionEvent evt) {                                     
        /*if ((!(currentInput.getText()).contains("+")) &&
        (!(currentInput.getText()).contains("-")) &&
        (!(currentInput.getText()).contains("/")) &&
        (!(currentInput.getText()).contains("*")))
        {*/
        String takeIn;
        takeIn = currentInput.getText() + "+";
        currentInput.setText(takeIn);
        //}

    }                                    

    /**
     * @param the action event
     * @return void
     * method adds a minus sign to the input
     */
    private void minusActionPerformed(java.awt.event.ActionEvent evt) {                                      
        /*if ((!(currentInput.getText()).contains("+")) &&
        (!(currentInput.getText()).contains("-")) &&
        (!(currentInput.getText()).contains("/")) &&
        (!(currentInput.getText()).contains("*")))
        {*/
        String takeIn;
        takeIn = currentInput.getText() + "-";
        currentInput.setText(takeIn);
        // }
    }                                     

    /**
     * @param the action event
     * @return void
     * method adds a multiplication sign to the input
     */
    private void timesActionPerformed(java.awt.event.ActionEvent evt) {                                      
        /*if ((!(currentInput.getText()).contains("+")) &&
        (!(currentInput.getText()).contains("-")) &&
        (!(currentInput.getText()).contains("/")) &&
        (!(currentInput.getText()).contains("*")))
        {*/
        String takeIn;
        takeIn = currentInput.getText() + "*";
        currentInput.setText(takeIn);
        //}
    }                                     

    /**
     * @param the action event
     * @return void
     * method adds a division sign to the input
     */
    private void divideActionPerformed(java.awt.event.ActionEvent evt) {                                       
        /*if ((!(currentInput.getText()).contains("+")) &&
        (!(currentInput.getText()).contains("-")) &&
        (!(currentInput.getText()).contains("/")) &&
        (!(currentInput.getText()).contains("*")))
        {*/
        String takeIn;
        takeIn = currentInput.getText() + "/";
        currentInput.setText(takeIn);
        //}
    }                                      

    /**
     * @param the action event
     * @return void
     * sends the string from input and sends it to the String calculator
     */
    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {
        if (currentInput.getText().length() < 3)
        {

            String b4 = currentInput.getText();
            String after = c1.operations(b4);
            answerOutput.setText(after);
        }
        else 
        {
            try {
                String b4 = currentInput.getText();
                String after = c2.operations(b4);
                answerOutput.setText(after); 
            } catch (Exception exc) {
                // TODO: handle exception
            }       

        }
        /*AudioPlayer MGP = AudioPlayer.player;
        AudioStream BGM;
        AudioData MD;
        ContinuousAudioDataStream loop = null;
        try {

        BGM = new AudioStream (new FileInputStream("/Users/AaryavNagpal/Documents/10th/Comp Sci- SHS/10th/CalcSong.wav"));
        MD = BGM.getData();
        loop = new ContinuousAudioDataStream(MD);
        }catch(IOException error){System.out.println("Error!!!");}

        MGP.start(loop);

        }
        //public void music()
        //{

        //}*/
    }

    /**
     * @param the action event
     * @return void
     * method takes the absolute value of the output
     */
    private void absoluteValueActionPerformed(java.awt.event.ActionEvent evt) {                                              
        Double takeIn;
        takeIn = Math.abs(Double.parseDouble(answerOutput.getText()));
        answerOutput.setText(takeIn + "");
    }                                             

    /**
     * @param the action event
     * @return void
     * method fins the square root of the output
     */
    private void squareRootActionPerformed(java.awt.event.ActionEvent evt) {                                           
        Double takeIn;
        takeIn = Math.sqrt(Double.parseDouble(answerOutput.getText()));
        answerOutput.setText(takeIn + "");
    }                                          

    /**
     * @param the action event
     * @return void
     * method adds color to the panel 
     */
    private void colorActionPerformed(java.awt.event.ActionEvent evt) {                                      
        int R = (int)(Math.random()*256);
        int G = (int)(Math.random()*256);
        int B= (int)(Math.random()*256);
        Color RGB = new Color(R, G, B);
        this.getContentPane().setBackground(RGB);
    }

    /**
     * @param the action event
     * @return void
     * method sends the output to another class to calculate binary
     */
    private void binaryConvertActionPerformed(java.awt.event.ActionEvent evt) {                                              
        int takeIn = (int)(Double.parseDouble(answerOutput.getText()));
        String ans = b1.conBaseThru(takeIn);
        answerOutput.setText(ans);
    } 

    /**
     * @param the action event
     * @return void
     * method sends the output to another class to calculate hexadecimal
     */
    private void hexConversionActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        String takeIn;
        takeIn = b1.convertHex((int)Double.parseDouble(answerOutput.getText()));
        answerOutput.setText(takeIn + "");
    } 

    /**
     * @param the action event
     * @return void
     * method deletes a character from the input
     */
    private void backActionPerformed(java.awt.event.ActionEvent evt) {                                     
        String takeIn = currentInput.getText();
        String delete1 = takeIn.substring(0, takeIn.length()-1);
        currentInput.setText(delete1);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new MyCal().setVisible(true);
                }
            });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton absoluteValue;
    private javax.swing.JTextField answerOutput;
    private javax.swing.JButton binaryConvert;
    private javax.swing.JButton clear;
    private javax.swing.JButton color;
    private javax.swing.JTextField currentInput;
    private javax.swing.JButton decimal;
    private javax.swing.JButton back;
    private javax.swing.JButton divide;
    private javax.swing.JButton eight;
    private javax.swing.JButton equals;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton hexConversion;
    private javax.swing.JButton minus;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton plus;
    private javax.swing.JButton seven;
    private javax.swing.JButton six;
    private javax.swing.JButton square;
    private javax.swing.JButton squareRoot;
    private javax.swing.JButton three;
    private javax.swing.JButton times;
    private javax.swing.JButton timesNegOne;
    private javax.swing.JButton two;
    private javax.swing.JButton zero;
    // End of variables declaration                   
}
